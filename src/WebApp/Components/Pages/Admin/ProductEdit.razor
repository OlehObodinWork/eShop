@page "/edit-product"
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@inject HttpClient Http
@rendermode InteractiveServer
@inject NavigationManager NavManager
@using Microsoft.Extensions.Configuration
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IConfiguration Configuration
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Text



@if (CatalogItem != null)
{


    <FluentGrid Spacing="@Spacing" OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true" Justify="@Justification" Style=" ">
        <FluentGridItem xs="12" sm="8">
            <h3>Product : @CatalogItem?.ProductNameEn</h3>
            <h5> Original Description:</h5>
            <p>@CatalogItem?.Description</p>
            <div class="card">
                @if (CatalogItemVariants != null)
                {
                    <div>
                        @foreach (var group in CatalogItemVariants)
                        {
                            <FluentGrid Spacing="@Spacing" OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true" Justify="@Justification" Style=" ">
                                <FluentGridItem xs="12" sm="2">

                                    <img style="display: block; max-width: 100%;" src="@(group.FirstOrDefault()?.VariantImage)" />
                                    @group.FirstOrDefault()?.VariantKey!.Split("-")[0]
                                </FluentGridItem>

                                <FluentGridItem xs="12" sm="2">
                                    <FluentTextField ValueChanged=@((string value) => KeyNameChanged(value, group, "EN")) Placeholder="Key Name EN"></FluentTextField>
                                    <FluentTextField ValueChanged=@((string value) => KeyNameChanged(value, group, "DE")) Placeholder="Key Name DE"></FluentTextField>

                                </FluentGridItem>
                                <FluentGridItem xs="12" sm="8">
                                    <div class="card-list-items">
                                        @foreach (var variant in group)
                                        {
                                            <div>
                                                <div>
                                                    @variant?.VarianKeyEnAdjusted!.Split("-")[1]

                                                    @*  <FluentTextField @bind-Value=@variant!.VariantKeyValue Label="Variant Value"></FluentTextField> *@
                                                    @*  <FluentTextField @bind-Value=@variant!.VariantKeyDE Label="Variant Key DE"></FluentTextField>  *@

                                                </div>
                                                <div> @variant?.VariantFinallPrice?.ToString("C")</div>
                                            </div>
                                        }
                                    </div>
                                </FluentGridItem>
                            </FluentGrid>


                        }
                    </div>
                }
            </div>
        </FluentGridItem>

        <FluentGridItem xs="12" sm="4">
            <div class="card">
                <FluentGrid Spacing="@Spacing" OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true" Justify="@Justification" Style=" ">
                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.NameEN Label="Product name EN"></FluentTextField>
                    </FluentGridItem>
                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.NameDE Label="Product Name DE"></FluentTextField>
                    </FluentGridItem>
                </FluentGrid>

                <p>
                    <FluentTextArea style="width: 100%" @bind-Value=CatalogItem.DescriptionEN Label="Description EN" />
                </p>

                <p>
                    <FluentTextArea style="width: 100%" @bind-Value=CatalogItem.DescriptionDE Label="Description DE" />
                </p>

                <FluentGrid Spacing="@Spacing" OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true" Justify="@Justification" Style=" ">
                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.PackingNameEN Label="Packing Name EN"></FluentTextField>

                    </FluentGridItem>
                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.PackingNameDE Label="Packing Name DE"></FluentTextField>
                    </FluentGridItem>

                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.ProductKeyEn Label="Product Key EN"></FluentTextField>

                    </FluentGridItem>
                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.ProductKenDE Label="Product key DE"></FluentTextField>
                    </FluentGridItem>


                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.CategoryNameEN Label="Category Name EN"></FluentTextField>

                    </FluentGridItem>
                    <FluentGridItem xs="12" sm="6">
                        <FluentTextField @bind-Value=CatalogItem.CategoryNameDE Label="Category Name DE"></FluentTextField>
                    </FluentGridItem>
                </FluentGrid>
                <FluentButton OnClick="OnSaveButtonClick"> Save </FluentButton>
            </div>
        </FluentGridItem>

    </FluentGrid>
}





@code {

    private IEnumerable<IGrouping<string, CatalogItemVariantDto>>? CatalogItemVariants { get; set; }

    private CatalogItemDetailDto? CatalogItem { get; set; }

    private CatalogItemVariantDto? CatalogItemVariant { get; set; }

    JustifyContent Justification = JustifyContent.FlexStart;
    int Spacing = 3;

    void OnBreakpointEnterHandler(GridItemSize size)
    {
        Console.WriteLine($"Page Size: {size}");
    }

    public void KeyNameChanged(string value, IGrouping<string, CatalogItemVariantDto> group, string lang)
    {
        Console.WriteLine(value);
        foreach (var variant in group)
        {
            if (lang == "EN") variant.VariantKeyNameEN = value;
            if (lang == "DE") variant.VariantKeyNameDE = value;
        }
      
    }

    protected override async Task OnInitializedAsync()
    {
        // Define the GridRowsDataProvider. Its job is to convert QuickGrid's GridRowsDataProviderRequest into a query against
        // an arbitrary data soure. In this example, we need to translate query parameters into the particular URL format
        // supported by the external JSON API. It's only possible to perform whatever sorting/filtering/etc is supported
        // by the external API.

        var baseUrl = new Uri(NavManager.Uri);

        Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(baseUrl.Query).TryGetValue("id", out var id);

        var url = $"{Configuration["Endpoints:CatalogAPI"]}/api/catalog/items/{id}?api-version=1";

        var response = await Http.GetFromJsonAsync<CatalogItemDetailDto>(url);

        CatalogItem = response;


        CatalogItemVariants = CatalogItem?.CatalogItemVariants?.Where(item => item.VariantKey != null).GroupBy(item => item.VariantKey?.Split("-")[0] ?? "Unknown");
        // Display the number of results just for information. This is completely separate from the grid.
        // numResults = (await Http.GetFromJsonAsync<FoodRecallQueryResult>("https://api.fda.gov/food/enforcement.json"))!.Count;
    }

    public async void OnSaveButtonClick()
    {
        await UpdateProductAsync();
    }

    public async Task UpdateProductAsync()
    {
        var url = $"{Configuration["Endpoints:CatalogAPI"]}/api/catalog/items?api-version=1";
        var json = JsonSerializer.Serialize(CatalogItem);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PutAsync(url, content);
        // response.EnsureSuccessStatusCode();
        var responseBody = await response.Content.ReadAsStringAsync();
        Console.WriteLine(responseBody);
    }


}

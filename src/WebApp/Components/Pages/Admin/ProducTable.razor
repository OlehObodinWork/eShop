
@using Microsoft.FluentUI.AspNetCore.Components
@page "/product-table"
@rendermode InteractiveServer
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavManager
@using Microsoft.Extensions.Configuration
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IConfiguration Configuration

<div style="height: 434px; overflow:auto;" tabindex="-1">
    <FluentDataGrid style="height: 100%;" ItemsProvider="foodRecallProvider" OnRowDoubleClick="@(()=>Console.WriteLine("Row double clicked!"))" Virtualize="true" ItemSize="46" GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="CatalogItemTest">
        <PropertyColumn Title="ID" Property="@(c => c!.Id)" />
        @*   <PropertyColumn Property="@(c => c!.State)" Style="color: #af5f00 ;" />
        <PropertyColumn Property="@(c => c!.City)" />
        <PropertyColumn Title="Company" Property="@(c => c!.Recalling_Firm)" Tooltip="true" />
        <PropertyColumn Property="@(c => c!.Status)" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item"  OnClick="@(() => Console.WriteLine("Edit clicked"))" />
            <FluentButton aria-label="Delete item" OnClick="@(() => Console.WriteLine("Delete clicked"))" />
        </TemplateColumn> *@
    </FluentDataGrid>
</div>

@* <p>Total: <strong>@numResults results found</strong></p> *@

@code {
    GridItemsProvider<CatalogItemTest> foodRecallProvider = default!;
   

    protected override void OnInitialized()
    {
      
        // Define the GridRowsDataProvider. Its job is to convert QuickGrid's GridRowsDataProviderRequest into a query against
        // an arbitrary data sourсe. In this example, we need to translate query parameters into the particular URL format
        // supported by the external JSON API. It's only possible to perform whatever sorting/filtering/etc is supported
        // by the external API.
        foodRecallProvider = async req =>
        {
            // var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", new Dictionary<string, object?>
            //             {
            //     { "skip", req.StartIndex },
            //     { "limit", req.Count },
            //             });


            var url = $"{Configuration["Endpoints:CatalogAPI"]}/api/catalog/items?api-version=1";

            var response = await Http.GetFromJsonAsync<FoodRecallQueryResult>(url, req.CancellationToken);

            return GridItemsProviderResult.From(
                items: response!.Data,
                totalItemCount: response!.Count);
        };

        // Display the number of results just for information. This is completely separate from the grid.
        // numResults = (await Http.GetFromJsonAsync<FoodRecallQueryResult>("https://api.fda.gov/food/enforcement.json"))!.Count;
    }

    public class FoodRecall
    {
        public string? Event_Id { get; set; }
        public string? State { get; set; }
        public string? City { get; set; }
        public string? Recalling_Firm { get; set; }
        public string? Status { get; set; }
    }

    public class FoodRecallQueryResult
    {

        public int Count { get; set; }
        public int PageSize { get; set; }
        
        required public List<CatalogItemTest> Data { get; set; }
    }

    public class MetaData
    {
        public ResultCount Results { get; set; } = default!;
    }

    public class ResultCount
    {
        public int Total { get; set; }
    }

}
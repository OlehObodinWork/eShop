@using Microsoft.FluentUI.AspNetCore.Components
@using eShop.WebApp.Components.Pages.Admin
@inject ThemeState ThemeState
@rendermode InteractiveServer
@inject IDialogService DialogService

 <FluentNavMenu Width="250">
            @if (ThemeState.IsDark)
            {
                <a class="logo logo-header" href="/admin">

                    <img id="logo" alt="Lazy Loading" src="@(ThemeState.IsDark ? "images/logofordark.png" : "images/logoforlight.png" )" class="logo logo-header" />

                </a>
            }
            else
            {
                <a class="logo logo-header" href="/admin">

                    <img id="logo" alt="Lazy Loading" src="images/logoforlight.png" class="logo logo-header" />

                </a>
            }

           @*  <FluentNavLink Href="/product-table" >Item 1</FluentNavLink>
            <FluentNavLink OnClick=@(() => HandleOnNavClick("ProductEdit"))>Item 1</FluentNavLink> *@
            <FluentMenuButton @ref=menubuttonm Text="+ Add New" IconStart="null" OnMenuChanged="HandleOnMenuChanged">
                <FluentMenuItem Id="AddProduct">Product</FluentMenuItem>
            </FluentMenuButton>
        </FluentNavMenu>
@code {
    private string? showSection;
    private FluentMenuButton menubuttonm = new();

    private void HandleOnNavClick(string name)
    {
        showSection = name;
    }

    private async Task HandleOnMenuChanged(MenuChangeEventArgs args)
    {
        if (args.Id == "AddProduct")
        {
            await OpenDialogAsync(args.Value);
        }
    }


    private bool _trapFocus = true;
    private bool _modal = true;

    private async Task OpenDialogAsync(string? title)
    {
        Console.WriteLine($"Open dialog centered");

        DialogParameters parameters = new()
            {
                Title = title,
                PrimaryActionEnabled = false,
                Width = "500px",
                TrapFocus = _trapFocus,
                Modal = _modal,
                PreventScroll = true,

            };



        IDialogReference dialog = await DialogService.ShowDialogAsync<AddProductDialog>(parameters);
        DialogResult? result = await dialog.Result;


        Console.WriteLine($"Dialog closed - Canceled: {result.Cancelled}");

    }

}

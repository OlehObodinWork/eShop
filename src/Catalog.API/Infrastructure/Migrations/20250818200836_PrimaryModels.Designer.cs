// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using eShop.Catalog.API.Infrastructure;

#nullable disable

namespace eShop.Catalog.API.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20250818200836_PrimaryModels")]
    partial class PrimaryModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogEnhancedImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PrimaryCatalogItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Src")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryCatalogItemId");

                    b.ToTable("PrimaryCatalogEnhancedImages");
                });

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogItemVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PrimaryCatalogItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProudctIdString")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "pid");

                    b.Property<string>("VarianImageEnhanced")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("VarianKeyAdjust")
                        .HasColumnType("text");

                    b.Property<decimal>("VariantFinallPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VariantHeigt")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "variantHeight");

                    b.Property<string>("VariantId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "vid");

                    b.Property<string>("VariantImageOrigin")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "variantImage");

                    b.Property<string>("VariantKey")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "variantKey");

                    b.Property<decimal>("VariantLength")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "variantLength");

                    b.Property<decimal>("VariantPrice")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "variantSellPrice");

                    b.Property<string>("VariantSKU")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "variantSku");

                    b.Property<decimal>("VariantSellPrice")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "variantSugSellPrice");

                    b.Property<string>("VariantStandart")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "variantStandard");

                    b.Property<decimal>("VariantWith")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "variantWidth");

                    b.Property<decimal>("VariatVolume")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "variantVolume");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryCatalogItemId");

                    b.ToTable("PrimaryCatalogItemVariants");
                });

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogKit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PrimaryCatalogKits");
                });

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogOriginalImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PrimaryCatalogItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Src")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryCatalogItemId");

                    b.ToTable("PrimaryCatalogOriginalImages");

                    b.HasAnnotation("Relational:JsonPropertyName", "productImageSet");
                });

            modelBuilder.Entity("PrimaryCatalogItemPrimaryCatalogKit", b =>
                {
                    b.Property<int>("PrimaryCatalogItemsId")
                        .HasColumnType("integer");

                    b.Property<int>("PrimaryCatalogKitsId")
                        .HasColumnType("integer");

                    b.HasKey("PrimaryCatalogItemsId", "PrimaryCatalogKitsId");

                    b.HasIndex("PrimaryCatalogKitsId");

                    b.ToTable("PrimaryCatalogItemPrimaryCatalogKit");
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CatalogBrand", (string)null);
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableStock")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogBrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(384)");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("boolean");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("CatalogTypeId");

                    b.HasIndex("Name");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.CatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CatalogType", (string)null);
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.PrimaryCatalogFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PrimaryCatalogFeatures");
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.PrimaryCatalogFeatureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PrimaryCatalogFeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("PrimaryCatalogItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryCatalogFeatureId");

                    b.HasIndex("PrimaryCatalogItemId");

                    b.ToTable("PrimaryCatalogFeatureValues");
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.PrimaryCatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableStock")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogBrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryId");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryName");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector");

                    b.Property<int>("ListedNum")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "ListedNum");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasAnnotation("Relational:JsonPropertyName", "productNameEn");

                    b.Property<string>("OriginPrice")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "sellPrice");

                    b.Property<string>("PackingName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "packingNameEn");

                    b.Property<string>("PackingNameSet")
                        .HasColumnType("text");

                    b.Property<string>("PackingWeight")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "packingWeight");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProducctType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "productType");

                    b.Property<string>("ProductKey")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "productKeyEn");

                    b.Property<string>("ProductSKU")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "productSku");

                    b.Property<string>("ProductWeight")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "productWeight");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestSellPrice")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "suggestSellPrice");

                    b.HasKey("Id");

                    b.ToTable("PrimaryCatalogItems");
                });

            modelBuilder.Entity("eShop.IntegrationEventLogEF.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TimesSent")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLog", (string)null);
                });

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogEnhancedImages", b =>
                {
                    b.HasOne("eShop.Catalog.API.Model.PrimaryCatalogItem", "PrimaryCatalogItem")
                        .WithMany("PrimaryCatalogEnhancedImages")
                        .HasForeignKey("PrimaryCatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCatalogItem");
                });

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogItemVariant", b =>
                {
                    b.HasOne("eShop.Catalog.API.Model.PrimaryCatalogItem", "PrimaryCatalogItem")
                        .WithMany("PrimaryCatalogItemVariants")
                        .HasForeignKey("PrimaryCatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCatalogItem");
                });

            modelBuilder.Entity("Catalog.API.Model.PrimaryCatalogOriginalImages", b =>
                {
                    b.HasOne("eShop.Catalog.API.Model.PrimaryCatalogItem", "PrimaryCatalogItem")
                        .WithMany("PrimaryCatalogOriginalImages")
                        .HasForeignKey("PrimaryCatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCatalogItem");
                });

            modelBuilder.Entity("PrimaryCatalogItemPrimaryCatalogKit", b =>
                {
                    b.HasOne("eShop.Catalog.API.Model.PrimaryCatalogItem", null)
                        .WithMany()
                        .HasForeignKey("PrimaryCatalogItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.API.Model.PrimaryCatalogKit", null)
                        .WithMany()
                        .HasForeignKey("PrimaryCatalogKitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.CatalogItem", b =>
                {
                    b.HasOne("eShop.Catalog.API.Model.CatalogBrand", "CatalogBrand")
                        .WithMany()
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Catalog.API.Model.CatalogType", "CatalogType")
                        .WithMany()
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.PrimaryCatalogFeatureValue", b =>
                {
                    b.HasOne("eShop.Catalog.API.Model.PrimaryCatalogFeature", "PrimaryCatalogFeature")
                        .WithMany()
                        .HasForeignKey("PrimaryCatalogFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Catalog.API.Model.PrimaryCatalogItem", "PrimaryCatalogItem")
                        .WithMany()
                        .HasForeignKey("PrimaryCatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCatalogFeature");

                    b.Navigation("PrimaryCatalogItem");
                });

            modelBuilder.Entity("eShop.Catalog.API.Model.PrimaryCatalogItem", b =>
                {
                    b.Navigation("PrimaryCatalogEnhancedImages");

                    b.Navigation("PrimaryCatalogItemVariants");

                    b.Navigation("PrimaryCatalogOriginalImages");
                });
#pragma warning restore 612, 618
        }
    }
}
